@model MyNerdDinner.Models.Dinner

@{
    ViewBag.Title = "Host a Nerd Dinner";
}

<h2>Host a Dinner</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend></legend>

        @Html.HiddenFor(model => model.DinnerID)

        <div id="dinnerDiv" style="float: right;">
            <div class="editor-label">
                @Html.LabelFor(model => model.Title)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Title)
                @Html.ValidationMessageFor(model => model.Title)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.EventDate)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.EventDate)
                @Html.ValidationMessageFor(model => model.EventDate)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Description)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HostedBy)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HostedBy)
                @Html.ValidationMessageFor(model => model.HostedBy)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.ContactPhone)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ContactPhone)
                @Html.ValidationMessageFor(model => model.ContactPhone)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Address)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Address)
                @Html.ValidationMessageFor(model => model.Address)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.Country)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Country)
                @Html.ValidationMessageFor(model => model.Country)
            </div>
        </div>
        <div id="mapDiv" style="float: left;">
            <div id="map" style="width:600px; height:400px; border:1px solid #ccc;"></div>
            @Html.EditorFor(model => model.LocationDetail)
            <!-- hidden inputs the JS expects -->
            @Html.Hidden("Latitude", Model.Location != null ? Model.Location.Latitude : 0)
            @Html.Hidden("Longitude", Model.Location != null ? Model.Location.Longitude : 0)
            @Html.EditorFor(model => model.LocationDetail)
        </div>
        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <!-- Leaflet CSS/JS (move CSS to layout for production) -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <!-- App map script (must be after Leaflet) -->
    <script src="@Url.Content("~/Scripts/NerdDinner.js")"></script>

    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(function () {
            var lat = @(Model.Location.Latitude);
            var lon = @(Model.Location.Longitude);
            lat = parseFloat(lat);
            lon = parseFloat(lon);
            if ((lat === 0) && (lon === 0))
                NerdDinner.LoadMap();
            else
                NerdDinner.LoadMap(lat, lon);
        });
    </script>
}